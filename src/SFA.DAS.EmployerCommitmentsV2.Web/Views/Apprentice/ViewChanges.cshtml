@inject ILinkGenerator LinkGenerator
@using SFA.DAS.EmployerCommitmentsV2.Web.Extensions
@using SFA.DAS.CommitmentsV2.Shared.Extensions
@using SFA.DAS.CommitmentsV2.Types
@using SFA.DAS.EmployerCommitmentsV2.Web.Models.Apprentice
@model SFA.DAS.EmployerCommitmentsV2.Web.Models.Apprentice.ViewChangesViewModel
@{
    ViewData["Title"] = "View changes - Apprenticeship service - GOV.UK";
    var apprenticeDisplayName = Model.ApprenticeName.EndsWith("s") ? Model.ApprenticeName + "'" : Model.ApprenticeName + "'s";
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

        <h1 class="govuk-heading-xl"> View changes </h1>

        @if (Model.CurrentParty == Party.Employer)
        {
            <p class="govuk-body">
                @Model.NewProviderName requested further changes. <a class="govuk-link" asp-controller="Cohort" asp-action="Details" asp-route-accountHashedId="@Model.AccountHashedId" asp-route-cohortReference="@Model.CohortReference" id="review-requested-changes-link">Review the apprentice details to update</a>.
            </p>
        }

        @if (Model.CurrentParty == Party.Provider)
        {
            <p class="govuk-body">
                @Model.NewProviderName are <a class="govuk-link" asp-controller="Cohort" asp-action="Details" asp-route-accountHashedId="@Model.AccountHashedId" asp-route-cohortReference="@Model.CohortReference" id="review-cohort-link">reviewing the request</a>.
            </p>
        }

        <h3 class="govuk-heading-m"> @apprenticeDisplayName details</h3>
    </div>
</div>

<table class="govuk-table">

    <thead class="govuk-table__head">
        <tr class="govuk-table__row">
            <th class="govuk-table__header"></th>
            <th scope="col" class="govuk-table__header "> Current details</th>
            <th scope="col" class="govuk-table__header "> Requested changes</th>
        </tr>
    </thead>
    <tbody class="govuk-table__body">
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header"> Training provider</th>
            <td class="govuk-table__cell"> @Model.CurrentProviderName</td>
            <td class="govuk-table__cell"> <mark class="das-mark das-mark--green">@Model.NewProviderName</mark> </td>
        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header"> Training start date</th>
            <td class="govuk-table__cell"> @Model.CurrentStartDate.ToString("MMMM yyyy")</td>
            @await Html.PartialAsync("_ViewChangesDateCell", new ViewChangesCell<DateTime?>(Model.CurrentStartDate, Model.NewStartDate))

        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header"> Training end date</th>
            <td class="govuk-table__cell"> @Model.CurrentEndDate.ToString("MMMM yyyy")</td>
            @await Html.PartialAsync("_ViewChangesDateCell", new ViewChangesCell<DateTime?>(Model.CurrentEndDate, Model.NewEndDate))
        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header"> Price </th>
            <td class="govuk-table__cell"> @Model.CurrentPrice.ToGdsCostFormat() </td>
            @await Html.PartialAsync("_ViewChangesPriceCell", new ViewChangesCell<int?>(Model.CurrentPrice, Model.NewPrice))
        </tr>
    </tbody>
</table>

@section back {
    <a id="back-link" class="govuk-back-link" href="@Url.Action("ApprenticeshipDetails", new ApprenticeshipDetailsRequest { AccountHashedId = Model.AccountHashedId, ApprenticeshipHashedId = Model.ApprenticeshipHashedId })">Back to apprentice's record</a>
}